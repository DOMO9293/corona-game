/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import React, {
  useRef,
  useEffect,
  useCallback,
} from "react";
import { useFrame, useResource } from "react-three-fiber";
import { useSpring, a, config } from "react-spring/three";

import { useOutline, useAssets } from "../store";
import { easeInQuad, easeInElastic } from "../utility/easing";
import CoronaShadow from "./Shadow"

function CoronaRenderer(props) {
  const {
    onDeathAnimEnd,
    isSeeking,
    isPreattacking,
    isDead,
    isSpawning,
  } = props;

  const rand = React.useRef(Math.floor(Math.random() * 10) + 1);

  const time = useRef();
  const group = useRef();
  const rotationGroup = useRef();
  const coronaMesh = useRef();
  const positionGroup = useRef();

  const { coronaNodes: nodes, fiveTone } = useAssets((s) => s);

  const { addOutline, removeOutline } = useOutline((s) => s);

  const [resourceRef, material] = useResource();

  const [springProps, set] = useSpring(() => ({
    opacity: 1,
    config: config.molasses,
  }));

  const handleDeath = useCallback(() => {
    removeOutline(coronaMesh.current);
    set({ opacity: 0, config: config.molasses, onRest: onDeathAnimEnd });
  }, [removeOutline, set, onDeathAnimEnd]);

  useEffect(() => void (isDead && handleDeath()), [isDead, handleDeath]);

  useEffect(() => void ((isPreattacking || isSpawning) && (time.current = 0)), [
    isPreattacking,
    isSpawning,
    time,
  ]);

  useEffect(() => void addOutline(coronaMesh.current), [addOutline, group]);

  useFrame(function ({ clock }) {
    if (isDead) return;

    const multiplier = 10 * (isSeeking ? 2 : 1);

    positionGroup.current.position.y =
      Math.sin(rand.current + clock.elapsedTime * multiplier) * 0.5;

    const h = 1 - Math.sin(rand.current + clock.elapsedTime * multiplier) / 8;
    const v = 1 + Math.sin(rand.current + clock.elapsedTime * multiplier) / 10;

    coronaMesh.current.scale.x = h;
    coronaMesh.current.scale.z = h;
    coronaMesh.current.scale.y = v;

    if (isPreattacking) {
      rotationGroup.current.rotation.y = easeInQuad(time.current);
      time.current += 0.07;
    }
    if (isSpawning) {
      rotationGroup.current.rotation.y = easeInQuad(time.current);

      coronaMesh.current.scale.x = 1 + 1.5 * easeInElastic(time.current / 8);
      coronaMesh.current.scale.z = 1 + 1.5 * easeInElastic(time.current / 8);
      coronaMesh.current.scale.y = 1 + 1.5 * easeInElastic(time.current / 8);

      time.current += 0.05;
    }
  });

  return (
    <>
      <a.meshToonMaterial
        transparent
        color={isDead ? 0xff0000 : 0x1e9983}
        shininess={0}
        specular={0xffffff}
        ref={resourceRef}
        gradientMap={fiveTone}
        {...springProps}
      />

      <group ref={group} dispose={null}>
        <group ref={rotationGroup}>
          <group ref={positionGroup}>
            <mesh
              material={material}
              ref={coronaMesh}
              geometry={nodes?.Cube?.geometry}
            />
          </group>
        </group>

        <CoronaShadow isDead={isDead} positionGroup={positionGroup} />
      </group>
    </>
  );
}

export default React.memo(CoronaRenderer);

/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import React, { useRef, useEffect, useCallback, Suspense } from 'react'
import { useFrame, useResource } from 'react-three-fiber'
import { useSphere, useParticle, useLockConstraint } from 'use-cannon';
import { useSpring, a, config } from 'react-spring/three';
import * as THREE from "three";
import useSound from 'use-sound'

import HitSfx from './sounds/Player_Hit.wav'
import HitSfx2 from './sounds/Player_Hit_2.wav'
import alertSfx from './sounds/Alert.wav'
import { COLLISION_GROUP, CORONA_STATUS, useOutline, useAssets, playerApi, useCorona, usePlayer } from "./store"
import Exclamation from './Exclamation';
import Pow from './Pow';
import { easeInQuad } from "./utility/easing"

function PhyCorona(props) {
  const { id, initPosition, store } = props
  const [useMyCorona] = store

  const attackPosition = useRef()
  const renderingGroup = useRef()
  
  // ZUSTAND VARS & SUBSCRIBE
  const { ref, status, actions, isUnderAttack, seekAlert, orientation: orientationStore } = useMyCorona(s => s)
  const { setStatus, handleAttack: _handleAttack } = actions
  
  const removeCorona = useCorona(s => s.actions.removeCorona)
  const playerBody = usePlayer(s => s.playerBody)
  
  const orientation = useRef(orientationStore[1].getState().coords)
  useEffect(() => orientationStore[1].subscribe(({ coords }) => orientation.current = coords), [orientation, orientationStore])

  // CANNON INIT
  const [coronaBody, coronaBodyApi] = useSphere(() => ({
    args: 0.2,
    mass: 0.1,
    position: initPosition,
    collisionFilter: COLLISION_GROUP.CORONA,
    collisionFilterMask: COLLISION_GROUP.CHEST | COLLISION_GROUP.BAT | COLLISION_GROUP.CORONA | COLLISION_GROUP.TILES,
    onCollide: e => onCollide.current(e)
  }))

  const [lock, lockApi] = useParticle(() => ({ position: initPosition }), ref)

  const [, , { disable }] = useLockConstraint(coronaBody, lock)

  // HANDLE CORONA BODY ON COLLIDE 
  const onCollide = useRef()
  const handleCollide = useCallback(
    function handleCollide(e) {

      const { body } = e
      const { isAttacking: isPlayerAttacking } = playerApi.getState()

      if (body?.userData?.type === COLLISION_GROUP.BAT && isPlayerAttacking) {
        _handleAttack()
      }

    },
    [_handleAttack]
  )
  useEffect(() => void (onCollide.current = handleCollide), [onCollide, handleCollide])

  // HANDLE CORONA DEAD STATUS
  const handleDeath = useCallback(
    function handleDeath() {

      disable()

      const dir = new THREE.Vector3()
      dir.subVectors(playerBody.current.position, coronaBody.current.position).normalize();

      coronaBodyApi.applyLocalImpulse([-4 * dir.x, 2, -4 * dir.z], [0, 0, 0])
    },
    [disable, coronaBody, coronaBodyApi, playerBody]
  )

  // HANDLE CORONA ATTACK STATUS
  const handleAttack = useCallback(() => {
    attackPosition.current = lock.current.position.clone()

    const dir = new THREE.Vector3()
    dir.subVectors(playerBody.current.position, coronaBody.current.position).normalize();

    const { x, y, z } = dir.multiplyScalar(0.75).add(coronaBody.current.position)
    lockApi.position.set(x, y, z)

    setTimeout(() => {
      const { x, y, z } = attackPosition.current
      lockApi.position.set(x, y, z)
      setStatus(CORONA_STATUS.PRE_ATTACK)
    }, 200)
  },
  [playerBody, lock, coronaBody, lockApi, attackPosition, setStatus])

  useEffect(() => {
    if (status === CORONA_STATUS.ATTACK) { handleAttack() }
    if (status === CORONA_STATUS.DEAD) { handleDeath() }
  }, [status, handleAttack, handleDeath])

  useFrame(function () {

    if (status === CORONA_STATUS.IDLE || status === CORONA_STATUS.SEEKING)  {

      const velocityFactor = status === CORONA_STATUS.IDLE ? 1 / 50 : 1 / 30

      lockApi.position.set(
        lock.current.position.x + orientation.current.x * velocityFactor,
        initPosition[1],
        lock.current.position.z + orientation.current.z * velocityFactor
      )
    }

    renderingGroup.current.position.copy(coronaBody.current.position)

    if (status === CORONA_STATUS.DEAD) {
      renderingGroup.current.rotation.copy(coronaBody.current.rotation)
    }
  })


  return (
    <>
      <mesh ref={lock} />
      <mesh ref={coronaBody} userData={{ type: COLLISION_GROUP.CORONA, id }} />
      <group ref={renderingGroup} scale={[0.2, 0.2, 0.2]}>
        <CoronaRenderer
          {...props}
          status={status}
          isUnderAttack={isUnderAttack}
          seekAlert={seekAlert}
          onDeathAnimEnd={removeCorona}
        />
        {status !== CORONA_STATUS.DEAD && (
          <CoronaUI
            position={coronaBody}
            seekAlert={seekAlert}
            isUnderAttack={isUnderAttack}
          />
        )}
      </group>
      <CoronaHowler
        isUnderAttack={isUnderAttack}
        seekAlert={seekAlert}
      />

    </>
  )
}

const CoronaUI = React.memo(function CoronaUI({
  seekAlert,
  isUnderAttack
}) {

  return (
    <Suspense fallback={null}>
      <Exclamation position={[0, 2.5, 0]} scale={[2, 2, 1]} visible={seekAlert} />
      <Pow position={[0, 1.5, 0]} scale={[2, 2, 1]} visible={isUnderAttack} />
    </Suspense>
  )
})

const CoronaHowler = React.memo(function CoronaHowler({ isUnderAttack, seekAlert }) {
  const rand = React.useRef(Math.floor(Math.random() * 10) + 1)

  const [playHitSfx] = useSound(rand.current > 5 ? HitSfx : HitSfx2)
  const [playAlertSfx] = useSound(alertSfx)

  useEffect(() => void (seekAlert && playAlertSfx()), [seekAlert, playAlertSfx])
  useEffect(() => void (isUnderAttack && playHitSfx()), [isUnderAttack, playHitSfx])

  return null
})

const CoronaRenderer = React.memo(
  function CoronaRenderer(props) {
    const { id, status, onDeathAnimEnd } = props

    const rand = React.useRef(Math.floor(Math.random() * 10) + 1)

    const time = useRef()
    const shadow = useRef()
    const group = useRef()
    const rotationGroup = useRef()
    const coronaMesh = useRef()
    const positionGroup = useRef()

    const { coronaNodes: nodes, coronaShadow: shadowTexture } = useAssets(s => s)

    const { addOutline, removeOutline } = useOutline(s => s)

    const [resourceRef, material] = useResource()

    const [springProps, set] = useSpring(() => ({ opacity: 1, config: config.molasses }))

    const handleDeath = useCallback(() => {
      removeOutline(coronaMesh.current)
      set({ opacity: 0, config: config.molasses, onRest: () => onDeathAnimEnd(id) })
    }, [id, removeOutline, set, onDeathAnimEnd])
    useEffect(() => void (status === CORONA_STATUS.DEAD && handleDeath()), [status, handleDeath])
    
    useEffect(() => void (status === CORONA_STATUS.PRE_ATTACK && (time.current = 0)), [status, time])

    useEffect(() => void addOutline(coronaMesh.current), [addOutline, group]);

    useFrame(({ clock }) => {
      if (status === CORONA_STATUS.DEAD) return

      const multiplier = 10 * (status === CORONA_STATUS.SEEKING ? 2 : 1)

      positionGroup.current.position.y = Math.sin(rand.current + clock.elapsedTime * multiplier) * 0.5

      const h = 1 - Math.sin(rand.current + clock.elapsedTime * multiplier) / 8
      const v = 1 + Math.sin(rand.current + clock.elapsedTime * multiplier) / 10

      coronaMesh.current.scale.x = h
      coronaMesh.current.scale.z = h
      coronaMesh.current.scale.y = v

      shadow.current.material.opacity = THREE.MathUtils.lerp(.6, .1, positionGroup.current.position.y);
      shadow.current.scale.x = THREE.MathUtils.lerp(4, 2, positionGroup.current.position.y);
      shadow.current.scale.y = THREE.MathUtils.lerp(4, 2, positionGroup.current.position.y);

      if (status === CORONA_STATUS.PRE_ATTACK) {
        rotationGroup.current.rotation.y = easeInQuad(time.current)
        time.current += 0.001
      }
    })

    return (
      <>
        <a.meshToonMaterial
          transparent
          color={status === CORONA_STATUS.DEAD ? 0xff0000 : 0x1E9983}
          shininess={0.7}
          specular={0xffffff}
          ref={resourceRef}
          {...springProps}
        />

        <group ref={group} dispose={null} >
          <group ref={rotationGroup}>
            <group ref={positionGroup}>
              <mesh material={material} ref={coronaMesh} geometry={nodes?.Cube?.geometry} name="Corona" />
            </group>
          </group>

          <mesh ref={shadow} rotation={[-Math.PI / 2, 0, 0]} position={[0, -2, 0]} scale={[4, 4, 4]} visible={status !== CORONA_STATUS.DEAD} >
            <planeBufferGeometry attach="geometry" args={[0.5, 0.5]} />
            <meshBasicMaterial
              attach="material"
              map={shadowTexture}
              transparent={true}
              depthWrite={false}
            />
          </mesh>

        </group>

      </>
    )
  }
)

export default PhyCorona